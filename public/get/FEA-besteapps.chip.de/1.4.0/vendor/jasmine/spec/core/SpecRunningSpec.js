describe("jasmine spec running",function(){var e,t;beforeEach(function(){e=new jasmine.Env,e.updateInterval=0,t=new jasmine.FakeTimer,e.setTimeout=t.setTimeout,e.clearTimeout=t.clearTimeout,e.setInterval=t.setInterval,e.clearInterval=t.clearInterval}),it("should assign spec ids sequentially",function(){var t,n,i,r,s;e.describe("test suite",function(){t=e.it("spec 0",function(){}),n=e.it("spec 1",function(){}),i=e.xit("spec 2",function(){}),r=e.it("spec 3",function(){})}),e.describe("test suite 2",function(){s=e.it("spec 4",function(){})}),expect(t.id).toEqual(0),expect(n.id).toEqual(1),expect(i.id).toEqual(2),expect(r.id).toEqual(3),expect(s.id).toEqual(4)}),it("should build up some objects with results we can inspect",function(){var t,n,i,r,s=e.describe("default current suite",function(){t=e.it("new spec"),n=e.it("spec with an expectation").runs(function(){var e="bar";this.expect(e).toEqual("bar")}),i=e.it("spec with failing expectation").runs(function(){var e="bar";this.expect(e).toEqual("baz")}),r=e.it("spec with multiple expectations").runs(function(){var e="bar",t="quux";this.expect(e).toEqual("bar"),this.expect(t).toEqual("quux")})});s.execute(),expect(t.description).toEqual("new spec"),expect(n.results().getItems().length).toEqual(1),expect(n.results().getItems()[0].passed()).toEqual(!0),expect(n.results().description).toEqual("spec with an expectation"),expect(i.results().getItems()[0].passed()).toEqual(!1),expect(r.results().getItems().length).toEqual(2)}),it("should work without a runs block",function(){var t;e.describe("default current suite",function(){t=e.it("spec with an expectation",function(){var e="bar";this.expect(e).toEqual("bar"),this.expect(e).toEqual("baz")})}),t.execute(),t.done=!0,expect(t.results().getItems().length).toEqual(2),expect(t.results().getItems()[0].passed()).toEqual(!0),expect(t.results().getItems()[1].passed()).toEqual(!1),expect(t.results().description).toEqual("spec with an expectation")}),it("should queue waits and runs that it encounters while executing specs",function(){var n,i=0;e.describe("test async spec",function(){n=e.it("spec w/ queued statments",function(){this.runs(function(){i++}),this.waits(500),this.runs(function(){i++}),this.waits(500),this.runs(function(){i++})})}),expect(i).toEqual(0),n.execute(),expect(i).toEqual(1),t.tick(500),expect(i).toEqual(2),t.tick(500),expect(i).toEqual(3)}),it("should run asynchronous tests",function(){var n,i=0;e.describe("test async spec",function(){n=e.it("spec w/ queued statments",function(){this.runs(function(){i++}),this.runs(function(){this.expect(i).toEqual(1)})})}),n.execute(),expect(n.results().getItems().length).toEqual(1),expect(n.results().getItems()[0].passed()).toEqual(!0),i=0,e.describe("test async spec",function(){n=e.it("spec w/ queued statments",function(){this.runs(function(){t.setTimeout(function(){i++},500)}),this.waits(1e3),this.runs(function(){this.expect(i).toEqual(1)})})}),n.execute(),expect(n.results().getItems().length).toEqual(0),t.tick(500),expect(n.results().getItems().length).toEqual(0),t.tick(500),expect(n.results().getItems().length).toEqual(1),expect(n.results().getItems()[0].passed()).toEqual(!0);var r,s=0;e.describe("test async spec",function(){r=e.it("spec w/ queued statments",function(){this.runs(function(){t.setTimeout(function(){s++},250)}),this.waits(500),this.runs(function(){t.setTimeout(function(){s++},250)}),this.waits(500),this.runs(function(){this.expect(s).toEqual(2)})})}),r.execute(),t.tick(1e3),expect(r.results().getItems().length).toEqual(1),expect(r.results().getItems()[0].passed()).toEqual(!0);var a,o=0;e.describe("test async spec",function(){a=e.it("spec w/ async fail",function(){this.runs(function(){t.setTimeout(function(){o++},250)}),this.waits(100),this.runs(function(){this.expect(o).toEqual(1)})})}),a.execute(),t.tick(100),t.tick(150),expect(a.results().getItems().length).toEqual(1),expect(a.results().getItems()[0].passed()).toEqual(!1)}),it("testAsyncSpecsWithMockSuite",function(){var n,i=0;e.describe("test async spec",function(){n=e.it("spec w/ queued statments",function(){this.runs(function(){t.setTimeout(function(){i++},250)}),this.waits(500),this.runs(function(){t.setTimeout(function(){i++},250)}),this.waits(1500),this.runs(function(){this.expect(i).toEqual(2)})})}),n.execute(),t.tick(2e3),expect(n.results().getItems().length).toEqual(1),expect(n.results().getItems()[0].passed()).toEqual(!0)}),describe("waitsFor",function(){function n(){var t=jasmine.util.argsToArray(arguments);e.describe("suite",function(){i=e.it("spec",function(){this.waitsFor.apply(this,t)})}),e.execute()}var i,r=function(){return!0};it("should accept args (latchFunction, timeoutMessage, timeout)",function(){n(r,"message",123);var e=i.queue.blocks[1];expect(e.latchFunction).toBe(r),expect(e.timeout).toEqual(123),expect(e.message).toEqual("message")}),it("should accept args (latchFunction, timeout)",function(){n(r,123);var e=i.queue.blocks[1];expect(e.latchFunction).toBe(r),expect(e.timeout).toEqual(123),expect(e.message).toEqual(null)}),it("should accept args (latchFunction, timeoutMessage)",function(){e.defaultTimeoutInterval=4321,n(r,"message");var t=i.queue.blocks[1];expect(t.latchFunction).toBe(r),expect(t.timeout).toEqual(4321),expect(t.message).toEqual("message")}),it("should accept args (latchFunction)",function(){e.defaultTimeoutInterval=4321,n(r);var t=i.queue.blocks[1];expect(t.latchFunction).toBe(r),expect(t.timeout).toEqual(4321),expect(t.message).toEqual(null)}),it("should accept deprecated args order (timeout, latchFunction, timeoutMessage)",function(){n(123,r,"message");var e=i.queue.blocks[1];expect(e.latchFunction).toBe(r),expect(e.timeout).toEqual(123),expect(e.message).toEqual("message")}),it("testWaitsFor",function(){var n,i=!1,r=!1;e.describe("foo",function(){n=e.it("has a waits for",function(){this.runs(function(){}),this.waitsFor(500,function(){return i}),this.runs(function(){r=!0})})}),n.execute(),expect(r).toEqual(!1),t.tick(100),i=!0,t.tick(100),expect(r).toEqual(!0)}),it("fails with message",function(){var n;e.describe("foo",function(){n=e.it("has a waits for",function(){this.runs(function(){}),this.waitsFor(500,function(){return!1},"my awesome condition"),this.runs(function(){})})}),n.execute(),t.tick(1e3),expect(n.results().getItems()[0].message).toEqual("timeout: timed out after 500 msec waiting for my awesome condition")}),it("fails and skips the rest of the spec if timeout is reached and the latch function hasn't returned true",function(){var n,i,r=!1,s=!1;e.describe("foo",function(){n=e.it("has a waits for",function(){this.runs(function(){}),this.waitsFor(500,function(){return!1}),this.runs(function(){r=!0})}),i=e.it("then carries on to the next test",function(){s=!0})}),e.execute(),expect(r).toEqual(!1),t.tick(100),expect(r).toEqual(!1),t.tick(400),expect(r).toEqual(!1),expect(n.results().getItems()[0].message).toEqual("timeout: timed out after 500 msec waiting for something to happen"),expect(s).toEqual(!0)}),it("runs afterEach after timing out",function(){var n=jasmine.createSpy("afterEach");e.describe("foo",function(){e.afterEach(n),e.it("waitsFor",function(){this.waitsFor(100,function(){return!1})})}).execute(),t.tick(500),expect(n).toHaveBeenCalled()}),it("runs single-spec after functions after timing out",function(){var n=jasmine.createSpy("after");e.describe("foo",function(){e.it("waitsFor",function(){this.after(n),this.waitsFor(100,function(){return!1})})}).execute(),t.tick(500),expect(n).toHaveBeenCalled()}),describe("with consecutive calls",function(){var n;beforeEach(function(){n=0}),it("exits immediately (does not stack) if the latchFunction times out",function(){var i=!1,r=!1;e.describe("suite that waits",function(){e.it("should stack timeouts",function(){this.waitsFor(500,function(){return i=!0,!1}),this.waitsFor(500,function(){r=!0}),this.runs(function(){n++})})}),expect(i).toEqual(!1),e.execute(),expect(i).toEqual(!0),expect(n).toEqual(0),expect(r).toEqual(!1),t.tick(500),expect(r).toEqual(!1),expect(n).toEqual(0),t.tick(500),expect(r).toEqual(!1),expect(n).toEqual(0)}),it("stacks latchFunctions",function(){var i=!1,r=!1,s=e.describe("suite that waits",function(){e.it("spec with waitsFors",function(){this.waitsFor(600,function(){return t.setTimeout(function(){i=!0},300),i}),this.waitsFor(600,function(){return t.setTimeout(function(){r=!0},300),r}),this.runs(function(){n++})})});expect(i).toEqual(!1),expect(r).toEqual(!1),s.execute(),expect(i).toEqual(!1),expect(r).toEqual(!1),expect(n).toEqual(0),t.tick(300),expect(i).toEqual(!0),expect(r).toEqual(!1),expect(n).toEqual(0),t.tick(300),expect(i).toEqual(!0),expect(r).toEqual(!0),expect(n).toEqual(1)})})}),it("testSpecAfter",function(){var t,n="",i=e.describe("has after",function(){t=e.it("spec with after",function(){this.runs(function(){n+="spec"})})});t.after(function(){n+="after1"}),t.after(function(){n+="after2"}),i.execute(),expect(n).toEqual("specafter2after1")}),describe("test suite declaration",function(){var n,i=function(){};it("should give the suite a description",function(){n=e.describe("one suite description",i),expect(n.description).toEqual("one suite description")}),it("should enqueue functions for multipart tests and support waits, and run any ready runs() blocks",function(){var i=0,r=0;n=e.describe("one suite description",function(){e.it("should be a test with queuedFunctions",function(){this.runs(function(){i++}),this.waits(100),this.runs(function(){r++})})}),n.execute(),expect(i).toEqual(1),expect(r).toEqual(0),t.tick(100),expect(r).toEqual(1)})}),it("testBeforeAndAfterCallbacks",function(){var t=e.describe("one suite with a before",function(){this.beforeEach(function(){this.foo=1}),e.it("should be a spec",function(){this.runs(function(){this.foo++,this.expect(this.foo).toEqual(2)})}),e.it("should be another spec",function(){this.runs(function(){this.foo++,this.expect(this.foo).toEqual(2)})})});t.execute();var n=t;expect(n.results().getItems()[0].passed()).toEqual(!0),expect(n.results().getItems()[1].passed()).toEqual(!0);var i=1,r=e.describe("one suite with an after_each",function(){e.it("should be a spec with an after_each",function(){this.expect(i).toEqual(1),i++,this.expect(i).toEqual(2)}),e.it("should be another spec with an after_each",function(){this.expect(i).toEqual(0),i++,this.expect(i).toEqual(1)}),this.afterEach(function(){i=0})});r.execute(),n=r,expect(n.afterEach.length).toEqual(1),expect(n.results().getItems()[0].passed()).toEqual(!0),expect(n.results().getItems()[1].passed()).toEqual(!0),expect(i).toEqual(0)}),it("#waits should allow consecutive waits calls",function(){var n=0,i=e.describe("suite that waits",function(){e.it("should wait",function(){this.waits(500),this.waits(500),this.runs(function(){n++})})});i.execute(),expect(n).toEqual(0),t.tick(500),expect(n).toEqual(0),t.tick(500),expect(n).toEqual(1)}),it("nested suites",function(){var t=0,n=0,i=0,r=0,s=e.describe("suite",function(){e.describe("nested",function(){e.it("should run nested suites",function(){t++}),e.it("should run nested suites",function(){n++})}),e.describe("nested 2",function(){e.it("should run suites following nested suites",function(){i++})}),e.it("should run tests following nested suites",function(){r++})});expect(t).toEqual(0),expect(n).toEqual(0),expect(i).toEqual(0),expect(r).toEqual(0),s.execute(),expect(t).toEqual(1),expect(n).toEqual(1),expect(i).toEqual(1),expect(r).toEqual(1)}),it("#beforeEach should be able to eval runs and waits blocks",function(){var n=0,i=0,r=e.describe("one suite with a before",function(){this.beforeEach(function(){this.runs(function(){n++}),this.waits(500),this.runs(function(){n++}),this.waits(500)}),e.it("should be a spec",function(){i=1,n++})});expect(n).toEqual(0),expect(i).toEqual(0),r.execute(),expect(i).toEqual(0),expect(n).toEqual(1),t.tick(500),expect(i).toEqual(0),expect(n).toEqual(2),t.tick(500),expect(i).toEqual(1),expect(n).toEqual(3)}),it("#afterEach should be able to eval runs and waits blocks",function(){var n=0,i=!1,r=!1,s=e.describe("one suite with a before",function(){this.afterEach(function(){this.waits(500),this.runs(function(){n++}),this.waits(500)}),e.it("should be the first spec",function(){i=!0}),e.it("should be a spec",function(){r=!0,n++})});expect(i).toEqual(!1),expect(r).toEqual(!1),expect(n).toEqual(0),s.execute(),expect(i).toEqual(!0),expect(r).toEqual(!1),expect(n).toEqual(0),t.tick(500),expect(n).toEqual(1),expect(r).toEqual(!1),t.tick(500),expect(n).toEqual(2),expect(r).toEqual(!0)}),it("Spec#after should be able to eval runs and waits blocks",function(){var n=!1,i=!1,r=!1,s=!1,a=e.describe("one suite with a before",function(){e.it("should be the first spec",function(){i=!0,this.after(function(){this.waits(500),this.runs(function(){s=!0}),this.waits(500)},!0),this.waits(500),this.runs(function(){n=!0})}),e.it("should be a spec",function(){r=!0})});expect(i).toEqual(!1),expect(n).toEqual(!1),expect(s).toEqual(!1),expect(r).toEqual(!1),a.execute(),expect(i).toEqual(!0),expect(n).toEqual(!1),expect(s).toEqual(!1),expect(r).toEqual(!1),t.tick(500),expect(i).toEqual(!0),expect(n).toEqual(!0),expect(s).toEqual(!1),expect(r).toEqual(!1),t.tick(500),expect(i).toEqual(!0),expect(n).toEqual(!0),expect(s).toEqual(!0),expect(r).toEqual(!1),t.tick(500),expect(i).toEqual(!0),expect(n).toEqual(!0),expect(s).toEqual(!0),expect(r).toEqual(!0)}),it("handles waits",function(){var n=!1,i=!1,r=e.describe("one suite with a before",function(){e.it("should be the first spec",function(){this.waits(500),this.runs(function(){n=!0})}),e.it("should be a spec",function(){i=!0})});expect(n).toEqual(!1),expect(i).toEqual(!1),r.execute(),expect(n).toEqual(!1),expect(i).toEqual(!1),t.tick(500),expect(n).toEqual(!0),expect(i).toEqual(!0)}),it("testBeforeExecutesSafely",function(){var t="",n=e.describe("before fails on first test, passes on second",function(){var n=0;this.beforeEach(function(){if(n++,1==n)throw"before failure"}),e.it("first should not run because before fails",function(){this.runs(function(){t+="first",this.expect(!0).toEqual(!0)})}),e.it("second should run and pass because before passes",function(){this.runs(function(){t+="second",this.expect(!0).toEqual(!0)})})});n.execute(),expect(t).toEqual("firstsecond");var i=n.results();expect(i.getItems()[0].getItems()[0].passed()).toEqual(!1),expect(i.getItems()[1].getItems()[0].passed()).toEqual(!0)}),it("testAfterExecutesSafely",function(){var t="",n=e.describe("after fails on first test, then passes",function(){var n=0;this.afterEach(function(){if(n++,1==n)throw"after failure"}),e.it("first should run, expectation passes, but spec fails because after fails",function(){this.runs(function(){t+="first",this.expect(!0).toEqual(!0)})}),e.it("second should run and pass because after passes",function(){this.runs(function(){t+="second",this.expect(!0).toEqual(!0)})}),e.it("third should run and pass because after passes",function(){this.runs(function(){t+="third",this.expect(!0).toEqual(!0)})})});n.execute(),expect(t).toEqual("firstsecondthird");var i=n.results();expect(i.getItems().length).toEqual(3,"testAfterExecutesSafely should have results for three specs"),expect(i.getItems()[0].getItems()[0].passed()).toEqual(!0,"testAfterExecutesSafely 1st spec should pass"),expect(i.getItems()[1].getItems()[0].passed()).toEqual(!0,"testAfterExecutesSafely 2nd spec should pass"),expect(i.getItems()[2].getItems()[0].passed()).toEqual(!0,"testAfterExecutesSafely 3rd spec should pass"),expect(i.getItems()[0].getItems()[0].passed()).toEqual(!0,"testAfterExecutesSafely 1st result for 1st suite spec should pass"),expect(i.getItems()[0].getItems()[1].passed()).toEqual(!1,"testAfterExecutesSafely 2nd result for 1st suite spec should fail because afterEach failed"),expect(i.getItems()[1].getItems()[0].passed()).toEqual(!0,"testAfterExecutesSafely 2nd suite spec should pass"),expect(i.getItems()[2].getItems()[0].passed()).toEqual(!0,"testAfterExecutesSafely 3rd suite spec should pass")}),it("should permit nested describes",function(){var t=[];e.beforeEach(function(){t.push("runner beforeEach")}),e.afterEach(function(){t.push("runner afterEach")}),e.describe("Something",function(){e.beforeEach(function(){t.push("outer beforeEach")}),e.afterEach(function(){t.push("outer afterEach")}),e.it("does it 1",function(){t.push("outer it 1")}),e.describe("Inner 1",function(){e.beforeEach(function(){t.push("inner 1 beforeEach")}),e.afterEach(function(){t.push("inner 1 afterEach")}),e.it("does it 2",function(){t.push("inner 1 it")})}),e.it("does it 3",function(){t.push("outer it 2")}),e.describe("Inner 2",function(){e.beforeEach(function(){t.push("inner 2 beforeEach")}),e.afterEach(function(){t.push("inner 2 afterEach")}),e.it("does it 2",function(){t.push("inner 2 it")})})}),e.execute();var n=["runner beforeEach","outer beforeEach","outer it 1","outer afterEach","runner afterEach","runner beforeEach","outer beforeEach","inner 1 beforeEach","inner 1 it","inner 1 afterEach","outer afterEach","runner afterEach","runner beforeEach","outer beforeEach","outer it 2","outer afterEach","runner afterEach","runner beforeEach","outer beforeEach","inner 2 beforeEach","inner 2 it","inner 2 afterEach","outer afterEach","runner afterEach"];expect(t).toEqual(n)}),it("should run multiple befores and afters in the order they are declared",function(){var t=[];e.beforeEach(function(){t.push("runner beforeEach1")}),e.afterEach(function(){t.push("runner afterEach1")}),e.beforeEach(function(){t.push("runner beforeEach2")}),e.afterEach(function(){t.push("runner afterEach2")}),e.describe("Something",function(){e.beforeEach(function(){t.push("beforeEach1")}),e.afterEach(function(){t.push("afterEach1")}),e.beforeEach(function(){t.push("beforeEach2")}),e.afterEach(function(){t.push("afterEach2")}),e.it("does it 1",function(){t.push("outer it 1")})}),e.execute();var n=["runner beforeEach1","runner beforeEach2","beforeEach1","beforeEach2","outer it 1","afterEach2","afterEach1","runner afterEach2","runner afterEach1"];expect(t).toEqual(n)}),it("builds up nested names",function(){var t;e.describe("Test Subject",function(){e.describe("when under circumstance A",function(){e.describe("and circumstance B",function(){t=e.it("behaves thusly",function(){})})})}),expect(t.getFullName()).toEqual("Test Subject when under circumstance A and circumstance B behaves thusly.")}),it("should skip empty suites",function(){e.describe("NonEmptySuite1",function(){e.it("should pass",function(){this.expect(!0).toEqual(!0)}),e.describe("NestedEmptySuite",function(){}),e.it("should pass",function(){this.expect(!0).toEqual(!0)})}),e.describe("EmptySuite",function(){}),e.describe("NonEmptySuite2",function(){e.it("should pass",function(){this.expect(!0).toEqual(!0)})}),e.execute();var t=e.currentRunner_.results();expect(t.totalCount).toEqual(3),expect(t.passedCount).toEqual(3),expect(t.failedCount).toEqual(0)}),it("should bind 'this' to the running spec within the spec body",function(){var n,i=e.describe("one suite description",function(){e.it("should be a test with queuedFunctions",function(){n=this.runs(function(){this.foo=0,this.foo++}),this.runs(function(){var e=this;t.setTimeout(function(){e.foo++},250)}),this.runs(function(){this.expect(this.foo).toEqual(2)}),this.waits(300),this.runs(function(){this.expect(this.foo).toEqual(2)})})});i.execute(),t.tick(600),expect(n.foo).toEqual(2);var r=i.results();expect(r.getItems()[0].getItems().length).toEqual(2),expect(r.getItems()[0].getItems()[0].passed()).toEqual(!1),expect(r.getItems()[0].getItems()[1].passed()).toEqual(!0)}),it("shouldn't run disabled tests",function(){var t=!1,n=e.describe("default current suite",function(){e.xit("disabled spec").runs(function(){t=!0}),e.it("enabled spec").runs(function(){var e="bar";expect(e).toEqual("bar")})});n.execute(),expect(t).toEqual(!1)}),it("shouldn't execute specs in disabled suites",function(){var t=jasmine.createSpy(),n=e.xdescribe("a disabled suite",function(){e.it("enabled spec, but should not be run",function(){t()})});n.execute(),expect(t).not.toHaveBeenCalled()}),it("#explodes should throw an exception when it is called inside a spec",function(){var t=!1,n=e.describe("Spec",function(){e.it("plodes",function(){try{this.explodes()}catch(e){t=e}expect(t).toNotEqual(!1)})});n.execute(),expect(t).toEqual("explodes function should not have been called")}),it("should recover gracefully when there are errors in describe functions",function(){var t=[],n=new jasmine.Reporter;n.reportSpecResults=function(e){t.push("Spec: "+e.getFullName());for(var n=e.results().getItems(),i=0;n.length>i;i++){var r=n[i];t.push("Result: "+r)}};try{e.describe("outer1",function(){throw e.describe("inner1",function(){throw e.it("should thingy",function(){this.expect(!0).toEqual(!0)}),Error("fake error")}),e.describe("inner2",function(){e.it("should other thingy",function(){this.expect(!0).toEqual(!0)})}),Error("fake error")})}catch(i){}e.describe("outer2",function(){e.it("should xxx",function(){this.expect(!0).toEqual(!0)})}),e.addReporter(n),e.execute(),expect(t.join("")).toMatch(RegExp("Spec: outer1 inner1 should thingy.Result: Passed.Spec: outer1 inner1 encountered a declaration exception.Result: Error: fake error.*Spec: outer1 inner2 should other thingy.Result: Passed.Spec: outer1 encountered a declaration exception.Result: Error: fake error.*Spec: outer2 should xxx.Result: Passed."))})});