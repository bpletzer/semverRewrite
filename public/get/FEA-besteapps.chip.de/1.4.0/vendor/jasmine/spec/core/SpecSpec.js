describe("Spec",function(){var e,t;beforeEach(function(){e=new jasmine.Env,e.updateInterval=0,t=new jasmine.Suite(e,"suite 1")}),describe("initialization",function(){it("should raise an error if an env is not passed",function(){try{new jasmine.Spec}catch(e){expect(e.message).toEqual("jasmine.Env() required")}}),it("should raise an error if a suite is not passed",function(){try{new jasmine.Spec(e)}catch(t){expect(t.message).toEqual("jasmine.Suite() required")}}),it("should assign sequential ids for specs belonging to the same env",function(){var n=new jasmine.Spec(e,t),i=new jasmine.Spec(e,t),r=new jasmine.Spec(e,t);expect(n.id).toEqual(0),expect(i.id).toEqual(1),expect(r.id).toEqual(2)})}),it("getFullName returns suite & spec description",function(){var n=new jasmine.Spec(e,t,"spec 1");expect(n.getFullName()).toEqual("suite 1 spec 1.")}),describe("results",function(){var n,i;beforeEach(function(){n=new jasmine.Spec(e,t),i=n.results(),expect(i.totalCount).toEqual(0),n.runs(function(){this.expect(!0).toEqual(!0),this.expect(!0).toEqual(!0)})}),it("results shows the total number of expectations for each spec after execution",function(){expect(i.totalCount).toEqual(0),n.execute(),expect(i.totalCount).toEqual(2)}),it("results shows the number of passed expectations for each spec after execution",function(){expect(i.passedCount).toEqual(0),n.execute(),expect(i.passedCount).toEqual(2)}),it("results shows the number of failed expectations for each spec after execution",function(){n.runs(function(){this.expect(!0).toEqual(!1)}),expect(i.failedCount).toEqual(0),n.execute(),expect(i.failedCount).toEqual(1)}),describe("results.passed",function(){it("is true if all spec expectations pass",function(){n.runs(function(){this.expect(!0).toEqual(!0)}),n.execute(),expect(i.passed()).toEqual(!0)}),it("is false if one spec expectation fails",function(){n.runs(function(){this.expect(!0).toEqual(!1)}),n.execute(),expect(i.passed()).toEqual(!1)}),it("a spec with no expectations will return true",function(){var n=new jasmine.Spec(e,t);n.runs(function(){}),n.execute(),expect(i.passed()).toEqual(!0)}),it("an unexecuted spec will return true",function(){expect(i.passed()).toEqual(!0)})}),it("includes log messages, which may contain arbitary objects",function(){n.runs(function(){this.log("here's some log message",{key:"value"},123)}),n.execute();var e=i.getItems();expect(e).toEqual([jasmine.any(jasmine.ExpectationResult),jasmine.any(jasmine.ExpectationResult),jasmine.any(jasmine.MessageResult)]);var t=e[2];expect(t.values).toEqual(["here's some log message",{key:"value"},123])})})});