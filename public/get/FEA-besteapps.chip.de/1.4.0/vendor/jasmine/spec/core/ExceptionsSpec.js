describe("Exceptions:",function(){var e;beforeEach(function(){e=new jasmine.Env,e.updateInterval=0}),it("jasmine.formatException formats Firefox exception messages as expected",function(){var e={fileName:"foo.js",line:"1978",message:"you got your foo in my bar",name:"A Classic Mistake"},t="A Classic Mistake: you got your foo in my bar in foo.js (line 1978)";expect(jasmine.util.formatException(e)).toEqual(t)}),it("jasmine.formatException formats Webkit exception messages as expected",function(){var e={sourceURL:"foo.js",lineNumber:"1978",message:"you got your foo in my bar",name:"A Classic Mistake"},t="A Classic Mistake: you got your foo in my bar in foo.js (line 1978)";expect(jasmine.util.formatException(e)).toEqual(t)}),describe("with break on exception",function(){it("should not catch the exception",function(){var t=e.describe("suite for break on exceptions",function(){e.it("should break when an exception is thrown",function(){throw Error("I should hit a breakpoint!")})});e.currentRunner();var n="I will never change!",i=jasmine.CATCH_EXCEPTIONS;jasmine.CATCH_EXCEPTIONS=!1;try{t.execute(),n="oops I changed"}catch(r){}finally{jasmine.CATCH_EXCEPTIONS=i}expect(n).toEqual("I will never change!")})}),describe("with catch on exception",function(){it("should handle exceptions thrown, but continue",function(){var t=new jasmine.FakeTimer;e.setTimeout=t.setTimeout,e.clearTimeout=t.clearTimeout,e.setInterval=t.setInterval,e.clearInterval=t.clearInterval;var n=e.describe("Suite for handles exceptions",function(){e.it("should be a test that fails because it throws an exception",function(){throw Error("fake error 1")}),e.it("should be another test that fails because it throws an exception",function(){this.runs(function(){throw Error("fake error 2")}),this.runs(function(){this.expect(!0).toEqual(!0)})}),e.it("should be a passing test that runs after exceptions are thrown",function(){this.expect(!0).toEqual(!0)}),e.it("should be another test that fails because it throws an exception after a wait",function(){this.runs(function(){}),this.waits(250),this.runs(function(){throw Error("fake error 3")})}),e.it("should be a passing test that runs after exceptions are thrown from a async test",function(){this.expect(!0).toEqual(!0)})});e.currentRunner(),n.execute(),t.tick(2500);var i=n.results(),r=i.getItems();expect(i.passed()).toEqual(!1),expect(r.length).toEqual(5),expect(r[0].passed()).toMatch(!1);var s=r[0].getItems();expect(s[0].passed()).toEqual(!1),expect(s[0].message).toMatch(/fake error 1/),expect(r[1].passed()).toEqual(!1),s=r[1].getItems(),expect(s[0].passed()).toEqual(!1),expect(s[0].message).toMatch(/fake error 2/),expect(s[1].passed()).toEqual(!0),expect(r[2].passed()).toEqual(!0),expect(r[3].passed()).toEqual(!1),s=r[3].getItems(),expect(s[0].message).toMatch(/fake error 3/),expect(r[4].passed()).toEqual(!0)}),it("should handle exceptions thrown directly in top-level describe blocks and continue",function(){var t=e.describe("a top level describe block that throws an exception",function(){throw e.it("is a test that should pass",function(){this.expect(!0).toEqual(!0)}),Error("top level error")});t.execute();var n=t.results(),i=n.getItems();expect(n.passed()).toEqual(!1),expect(i.length).toEqual(2),expect(i[1].description).toMatch(/encountered a declaration exception/)}),it("should handle exceptions thrown directly in nested describe blocks and continue",function(){var t=e.describe("a top level describe",function(){e.describe("a mid-level describe that throws an exception",function(){throw e.it("is a test that should pass",function(){this.expect(!0).toEqual(!0)}),Error("a mid-level error")})});t.execute();var n=t.results(),i=n.getItems();expect(n.passed()).toEqual(!1),expect(i.length).toEqual(1);var r=i[0].getItems();expect(r.length).toEqual(2),expect(r[1].description).toMatch(/encountered a declaration exception/)})})});